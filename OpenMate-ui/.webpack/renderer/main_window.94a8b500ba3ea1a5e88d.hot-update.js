"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdateopenmate_ui"]("main_window",{

/***/ "./src/renderer.js":
/*!*************************!*\
  !*** ./src/renderer.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _index_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.css */ \"./src/index.css\");\n// =======================\n// State Management\n// =======================\nconst AppState = {\n  repos: [],\n  collections: [],\n\n  setRepos(repos) {\n    this.repos = repos;\n  },\n\n  setCollections(collections) {\n    this.collections = collections;\n  },\n\n  getFilteredRepos(searchTerm) {\n    return this.filterItems(this.repos, searchTerm);\n  },\n\n  getFilteredCollections(searchTerm) {\n    return this.filterItems(this.collections, searchTerm);\n  },\n\n  filterItems(items, searchTerm) {\n    if (!searchTerm) return items;\n    const term = searchTerm.toLowerCase();\n    return items.filter(\n      (item) =>\n        item.name.toLowerCase().includes(term) ||\n        (item.path && item.path.toLowerCase().includes(term)) ||\n        (item.repos && item.repos.toLowerCase().includes(term))\n    );\n  },\n};\n\n// =======================\n// Utility Functions\n// =======================\nconst Utils = {\n  formatPath(path) {\n    return path ? path.replace(/\\\\/g, \"/\") : \"\";\n  },\n\n  debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n      const later = () => {\n        clearTimeout(timeout);\n        func(...args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  },\n\n  createElement(tag, attributes = {}, children = []) {\n    const element = document.createElement(tag);\n    Object.entries(attributes).forEach(([key, value]) => {\n      if (key === \"className\") {\n        element.className = value;\n      } else {\n        element.setAttribute(key, value);\n      }\n    });\n    children.forEach((child) => {\n      if (typeof child === \"string\") {\n        element.appendChild(document.createTextNode(child));\n      } else {\n        element.appendChild(child);\n      }\n    });\n    return element;\n  },\n};\n\n// =======================\n// Storage Management\n// =======================\nconst Storage = {\n  THEME_KEY: \"openmate-theme\",\n  IDE_KEY: \"openmate-ide-selector\",\n\n  get(key) {\n    try {\n      return localStorage.getItem(key);\n    } catch (e) {\n      console.warn(\"Storage get failed:\", e);\n      return null;\n    }\n  },\n\n  set(key, value) {\n    try {\n      localStorage.setItem(key, value);\n    } catch (e) {\n      console.warn(\"Storage set failed:\", e);\n    }\n  },\n};\n\n// =======================\n// Theme Management\n// =======================\nconst ThemeManager = {\n  init() {\n    this.themeToggle = document.getElementById(\"theme-toggle\");\n    this.themeIcon = document.querySelector(\".theme-icon\");\n\n    this.loadTheme();\n    this.bindEvents();\n  },\n\n  loadTheme() {\n    const savedTheme = Storage.get(Storage.THEME_KEY);\n    const systemPrefersDark = window.matchMedia(\n      \"(prefers-color-scheme: dark)\"\n    ).matches;\n    const theme = savedTheme || (systemPrefersDark ? \"dark\" : \"light\");\n\n    this.setTheme(theme);\n  },\n\n  setTheme(theme) {\n    document.documentElement.setAttribute(\"data-theme\", theme);\n    this.themeIcon.textContent = theme === \"dark\" ? \"☀️\" : \"🌙\";\n    Storage.set(Storage.THEME_KEY, theme);\n  },\n\n  toggle() {\n    const currentTheme = document.documentElement.getAttribute(\"data-theme\");\n    const newTheme = currentTheme === \"dark\" ? \"light\" : \"dark\";\n    this.setTheme(newTheme);\n  },\n\n  bindEvents() {\n    this.themeToggle.addEventListener(\"click\", () => this.toggle());\n  },\n};\n\n// =======================\n// IDE Selector Management\n// =======================\nconst IDEManager = {\n  init() {\n    this.selector = document.getElementById(\"ide-selector\");\n    this.loadPreference();\n    this.bindEvents();\n  },\n\n  loadPreference() {\n    const savedIDE = Storage.get(Storage.IDE_KEY);\n    if (savedIDE) {\n      this.selector.value = savedIDE;\n    }\n  },\n\n  getSelectedIDE() {\n    return this.selector.value;\n  },\n\n  bindEvents() {\n    this.selector.addEventListener(\"change\", (e) => {\n      const selectedIDE = e.target.value;\n      if (selectedIDE) {\n        Storage.set(Storage.IDE_KEY, selectedIDE);\n        NotificationManager.showSuccess(`Default IDE set to ${selectedIDE}`);\n      }\n    });\n  },\n};\n\n// =======================\n// Notification Management\n// =======================\nconst NotificationManager = {\n  show(message, type = \"info\", duration = 3000) {\n    const colors = {\n      success: \"#4CAF50\",\n      error: \"#F44336\",\n      info: \"#2196F3\",\n    };\n\n    const notification = Utils.createElement(\n      \"div\",\n      {\n        style: `\n        position: fixed;\n        bottom: 20px;\n        right: 20px;\n        padding: 10px 20px;\n        background: ${colors[type]};\n        color: white;\n        border-radius: 4px;\n        z-index: 1000;\n        transition: opacity 0.3s ease;\n      `,\n      },\n      [message]\n    );\n\n    document.body.appendChild(notification);\n\n    setTimeout(() => {\n      notification.style.opacity = \"0\";\n      setTimeout(() => {\n        if (document.body.contains(notification)) {\n          document.body.removeChild(notification);\n        }\n      }, 300);\n    }, duration);\n  },\n\n  showSuccess(message) {\n    this.show(message, \"success\");\n  },\n\n  showError(message) {\n    this.show(message, \"error\");\n  },\n\n  showInfo(message) {\n    this.show(message, \"info\");\n  },\n};\n\n// =======================\n// Modal Management\n// =======================\nclass Modal {\n  constructor(modalId, formId, openBtnId) {\n    this.modal = document.getElementById(modalId);\n    this.form = document.getElementById(formId);\n    this.openBtn = document.getElementById(openBtnId);\n    this.closeBtn = this.modal.querySelector(\".close\");\n\n    this.bindEvents();\n  }\n\n  bindEvents() {\n    this.openBtn?.addEventListener(\"click\", () => this.open());\n    this.closeBtn?.addEventListener(\"click\", () => this.close());\n\n    // Close on outside click\n    window.addEventListener(\"click\", (e) => {\n      if (e.target === this.modal) {\n        this.close();\n      }\n    });\n\n    // Close on Escape key\n    document.addEventListener(\"keydown\", (e) => {\n      if (e.key === \"Escape\" && this.isOpen()) {\n        this.close();\n      }\n    });\n  }\n\n  open() {\n    this.modal.style.display = \"flex\";\n    document.body.style.overflow = \"hidden\";\n    this.onOpen();\n  }\n\n  close() {\n    this.modal.style.display = \"none\";\n    document.body.style.overflow = \"auto\";\n    this.form?.reset();\n    this.onClose();\n  }\n\n  isOpen() {\n    return this.modal.style.display === \"flex\";\n  }\n\n  onOpen() {\n    // Override in subclasses\n  }\n\n  onClose() {\n    // Override in subclasses\n  }\n}\n\n// =======================\n// Repository Modal\n// =======================\nclass RepositoryModal extends Modal {\n  constructor() {\n    super(\"add-repo-modal\", \"add-repo-form\", \"add-repo-btn\");\n    this.nameInput = document.getElementById(\"repo-name\");\n    this.pathInput = document.getElementById(\"repo-path\");\n    this.browseBtn = document.getElementById(\"browse-path\");\n\n    this.bindRepositoryEvents();\n  }\n\n  onOpen() {\n    this.nameInput.focus();\n  }\n\n  bindRepositoryEvents() {\n    this.form.addEventListener(\"submit\", (e) => this.handleSubmit(e));\n    this.browseBtn.addEventListener(\"click\", () => this.browsePath());\n  }\n\n  async handleSubmit(e) {\n    e.preventDefault();\n\n    const name = this.nameInput.value.trim();\n    const path = this.pathInput.value.trim();\n\n    if (!this.validateInputs(name, path)) return;\n\n    try {\n      await window.electronAPI.addRepository({ name, path });\n      this.close();\n      NotificationManager.showSuccess(\"Repository added successfully!\");\n      UIManager.refresh();\n    } catch (error) {\n      NotificationManager.showError(\n        `Error adding repository: ${error.message}`\n      );\n    }\n  }\n\n  validateInputs(name, path) {\n    if (!name || !path) {\n      NotificationManager.showError(\"Please fill in all fields\");\n      return false;\n    }\n    return true;\n  }\n\n  async browsePath() {\n    try {\n      const path = await window.electronAPI.openDirectoryDialog();\n      if (path) {\n        this.pathInput.value = path;\n      }\n    } catch (error) {\n      NotificationManager.showError(\n        `Error selecting directory: ${error.message}`\n      );\n    }\n  }\n}\n\n// =======================\n// Edit Repository Modal\n// =======================\nclass EditRepositoryModal extends Modal {\n  constructor() {\n    super(\"edit-repo-modal\", \"edit-repo-form\");\n    this.nameInput = document.getElementById(\"edit-repo-name\");\n    this.pathInput = document.getElementById(\"edit-repo-path\");\n    this.originalNameInput = document.getElementById(\"edit-original-name\");\n    this.browseBtn = document.getElementById(\"edit-browse-path\");\n    this.closeBtn = document.querySelector(\"#edit-repo-modal .close\");\n\n    this.bindEvents();\n  }\n\n  open(repo) {\n    // Store original values\n    this.originalNameInput.value = repo.name;\n\n    // Set current values (read-only)\n    document.getElementById(\"current-repo-name\").textContent = repo.name;\n    document.getElementById(\"current-repo-path\").textContent = repo.path;\n\n    // Clear and reset form fields\n    this.nameInput.value = repo.name;\n    this.pathInput.value = repo.path;\n    this.nameInput.placeholder = `Current: ${repo.name}`;\n    this.pathInput.placeholder = `Current: ${repo.path}`;\n\n    // Open modal and focus\n    super.open();\n    this.nameInput.focus();\n  }\n\n  bindEvents() {\n    this.form?.addEventListener(\"submit\", (e) => this.handleSubmit(e));\n    this.browseBtn?.addEventListener(\"click\", () => this.browsePath());\n    this.closeBtn?.addEventListener(\"click\", () => this.close());\n  }\n\n  async handleSubmit(e) {\n    e.preventDefault();\n\n    const originalName = this.originalNameInput.value;\n    const name = this.nameInput.value.trim() || originalName; // Use original name if new name is empty\n    const path =\n      this.pathInput.value.trim() ||\n      this.pathInput.placeholder.replace(\"Current: \", \"\"); // Use current path if empty\n\n    if (!this.validateInputs(name, path)) return;\n\n    try {\n      // Get current repositories data\n      const data = await window.electronAPI.getReposData();\n\n      // Ensure we have the expected data structure\n      if (!data || typeof data !== \"object\" || !data.repos) {\n        throw new Error(\"Invalid repository data structure\");\n      }\n\n      console.log(\"Current repositories:\", data.repos); // Debug log\n      console.log(\"Looking for repository with name:\", originalName); // Debug log\n\n      // Check if the repository exists\n      if (!data.repos[originalName]) {\n        console.error(\"Repository not found in:\", data.repos);\n        throw new Error(\"Repository not found\");\n      }\n\n      // Check if name is being changed to an existing one (except current repo)\n      if (name !== originalName && data.repos[name]) {\n        NotificationManager.showError(\n          \"A repository with this name already exists\"\n        );\n        return;\n      }\n\n      // Create a copy of the repositories\n      const updatedRepos = { ...data.repos };\n\n      // If name changed, remove old entry\n      if (name !== originalName) {\n        delete updatedRepos[originalName];\n      }\n\n      // Update or add the repository with new values and updatedAt timestamp\n      const now = new Date().toISOString();\n      updatedRepos[name] = {\n        path,\n        updatedAt: data.repos[originalName]?.updatedAt || now,\n      };\n\n      // Save the updated repositories using the correct IPC method\n      await window.electronAPI.writeReposFile({\n        ...data,\n        repos: updatedRepos,\n      });\n\n      // Refresh UI\n      UIManager.refresh();\n\n      NotificationManager.showSuccess(\"Repository updated successfully\");\n      this.close();\n    } catch (error) {\n      console.error(\"Error updating repository:\", error);\n      NotificationManager.showError(\n        `Failed to update repository: ${error.message}`\n      );\n    }\n  }\n\n  validateInputs(name, path) {\n    if (!name) {\n      NotificationManager.showError(\"Please enter a repository name\");\n      return false;\n    }\n    if (!path) {\n      NotificationManager.showError(\"Please select a repository path\");\n      return false;\n    }\n    return true;\n  }\n\n  async browsePath() {\n    try {\n      const path = await window.electronAPI.openDirectoryDialog();\n      if (path) {\n        this.pathInput.value = path;\n      }\n    } catch (error) {\n      NotificationManager.showError(\n        `Error selecting directory: ${error.message}`\n      );\n    }\n  }\n}\n\n// =======================\n// Edit Collection Modal\n// =======================\nclass EditCollectionModal extends Modal {\n  constructor() {\n    super(\"edit-collection-modal\", \"edit-collection-form\");\n    this.nameInput = document.getElementById(\"edit-collection-name\");\n    this.originalNameInput = document.getElementById(\n      \"edit-original-collection-name\"\n    );\n    this.currentNameEl = document.getElementById(\"current-collection-name\");\n    this.currentReposEl = document.getElementById(\"current-collection-repos\");\n    this.reposSelection = document.getElementById(\"edit-repos-selection\");\n    this.closeBtn = document.querySelector(\"#edit-collection-modal .close\");\n\n    this.bindEvents();\n  }\n\n  async open(collection) {\n    // Store original values\n    this.originalNameInput.value = collection.name;\n\n    // Set current values\n    this.currentNameEl.textContent = collection.name;\n\n    // Handle both array and string formats for backward compatibility\n    const repoList = Array.isArray(collection.repos)\n      ? collection.repos\n      : (collection.repos || \"\")\n          .split(\",\")\n          .map((s) => s.trim())\n          .filter(Boolean);\n\n    this.currentReposEl.textContent = repoList.length\n      ? repoList.join(\", \")\n      : \"No repositories\";\n    this.nameInput.value = collection.name;\n    this.nameInput.placeholder = `Current: ${collection.name}`;\n\n    // Load repositories with current selection\n    await this.loadRepositories(repoList);\n\n    // Open modal and focus\n    super.open();\n    this.nameInput.focus();\n  }\n\n  bindEvents() {\n    this.form?.addEventListener(\"submit\", (e) => this.handleSubmit(e));\n\n    this.closeBtn?.addEventListener(\"click\", () => this.close());\n  }\n\n  async loadRepositories(selectedRepos = []) {\n    try {\n      const data = await window.electronAPI.getReposData();\n      this.renderRepositorySelection(data.repos || {}, selectedRepos);\n    } catch (error) {\n      NotificationManager.showError(\n        `Error loading repositories: ${error.message}`\n      );\n      this.reposSelection.innerHTML =\n        '<div class=\"error\">Error loading repositories. Please try again.</div>';\n    }\n  }\n\n  renderRepositorySelection(repos, selectedRepos = []) {\n    if (!repos || Object.keys(repos).length === 0) {\n      this.reposSelection.innerHTML =\n        '<div class=\"loading\">No repositories found. Add repositories first.</div>';\n      return;\n    }\n\n    const reposList = Object.entries(repos)\n      .sort(([nameA], [nameB]) => nameA.localeCompare(nameB))\n      .map(\n        ([name, repo]) => `\n        <div class=\"repo-checkbox-item\">\n          <input type=\"checkbox\" id=\"edit-repo-${name}\" name=\"repos\" value=\"${name}\" \n                 ${selectedRepos.includes(name) ? \"checked\" : \"\"}>\n          <label for=\"edit-repo-${name}\">\n            <span>${name}</span>\n            <span class=\"repo-path\">${repo.path}</span>\n          </label>\n        </div>\n      `\n      )\n      .join(\"\");\n\n    this.reposSelection.innerHTML = reposList;\n  }\n\n  async handleSubmit(e) {\n    e.preventDefault();\n\n    const originalName = this.originalNameInput.value;\n    const name = this.nameInput.value.trim();\n    const selectedRepos = this.getSelectedRepositories();\n\n    if (!this.validateInputs(name, selectedRepos)) return;\n\n    try {\n      const data = await window.electronAPI.getReposData();\n\n      // Check if name is being changed to an existing one (except current collection)\n      if (name !== originalName && data.collections && data.collections[name]) {\n        NotificationManager.showError(\n          \"A collection with this name already exists\"\n        );\n        return;\n      }\n\n      // Create a copy of the collections\n      const updatedCollections = { ...data.collections };\n\n      // Remove old entry if name changed\n      if (name !== originalName) {\n        delete updatedCollections[originalName];\n      }\n\n      // Update or add the collection with new values\n      updatedCollections[name] = {\n        name,\n        repos: selectedRepos, // Save as array\n        updatedAt:\n          updatedCollections[originalName]?.updatedAt ||\n          new Date().toISOString(),\n      };\n\n      // Save the updated collections\n      await window.electronAPI.writeReposFile({\n        ...data,\n        collections: updatedCollections,\n      });\n\n      this.close();\n      NotificationManager.showSuccess(\"Collection updated successfully\");\n      UIManager.refresh();\n    } catch (error) {\n      console.error(\"Error updating collection:\", error);\n      NotificationManager.showError(\n        `Failed to update collection: ${error.message}`\n      );\n    }\n  }\n\n  getSelectedRepositories() {\n    return Array.from(\n      this.reposSelection.querySelectorAll('input[type=\"checkbox\"]:checked')\n    ).map((checkbox) => checkbox.value);\n  }\n\n  validateInputs(name, selectedRepos) {\n    if (!name) {\n      NotificationManager.showError(\"Please enter a collection name\");\n      return false;\n    }\n\n    if (selectedRepos.length === 0) {\n      NotificationManager.showError(\"Please select at least one repository\");\n      return false;\n    }\n\n    return true;\n  }\n}\n\n// =======================\n// Collection Modal\n// =======================\nclass CollectionModal extends Modal {\n  constructor() {\n    super(\"add-collection-modal\", \"add-collection-form\", \"add-collection-btn\");\n    this.nameInput = document.getElementById(\"collection-name\");\n    this.reposSelection = document.getElementById(\"repos-selection\");\n\n    this.bindCollectionEvents();\n  }\n\n  async onOpen() {\n    this.nameInput.focus();\n    await this.loadRepositories();\n  }\n\n  onClose() {\n    this.reposSelection.innerHTML =\n      '<div class=\"loading\">Loading repositories...</div>';\n  }\n\n  bindCollectionEvents() {\n    this.form.addEventListener(\"submit\", (e) => this.handleSubmit(e));\n  }\n\n  async loadRepositories() {\n    try {\n      const data = await window.electronAPI.getReposData();\n      this.renderRepositorySelection(data.repos || {});\n    } catch (error) {\n      NotificationManager.showError(\n        `Error loading repositories: ${error.message}`\n      );\n      this.reposSelection.innerHTML =\n        '<div class=\"error\">Error loading repositories. Please try again.</div>';\n    }\n  }\n\n  renderRepositorySelection(repos) {\n    if (!repos || Object.keys(repos).length === 0) {\n      this.reposSelection.innerHTML =\n        '<div class=\"loading\">No repositories found. Add repositories first.</div>';\n      return;\n    }\n\n    const reposList = Object.entries(repos)\n      .sort(([nameA], [nameB]) => nameA.localeCompare(nameB))\n      .map(\n        ([name, repo]) => `\n        <div class=\"repo-checkbox-item\">\n          <input type=\"checkbox\" id=\"repo-${name}\" name=\"repos\" value=\"${name}\">\n          <label for=\"repo-${name}\">\n            <span>${name}</span>\n            <span class=\"repo-path\">${repo.path}</span>\n          </label>\n        </div>\n      `\n      )\n      .join(\"\");\n\n    this.reposSelection.innerHTML = reposList;\n  }\n\n  async handleSubmit(e) {\n    e.preventDefault();\n\n    const name = this.nameInput.value.trim();\n    const selectedRepos = this.getSelectedRepositories();\n\n    if (!this.validateInputs(name, selectedRepos)) return;\n\n    try {\n      await this.saveCollection(name, selectedRepos);\n      this.close();\n      NotificationManager.showSuccess(\"Collection created successfully!\");\n      UIManager.refresh();\n    } catch (error) {\n      NotificationManager.showError(\n        `Error creating collection: ${error.message}`\n      );\n    }\n  }\n\n  getSelectedRepositories() {\n    return Array.from(\n      this.reposSelection.querySelectorAll('input[type=\"checkbox\"]:checked')\n    ).map((checkbox) => checkbox.value);\n  }\n\n  validateInputs(name, selectedRepos) {\n    if (!name) {\n      NotificationManager.showError(\"Please enter a collection name\");\n      return false;\n    }\n\n    if (selectedRepos.length === 0) {\n      NotificationManager.showError(\"Please select at least one repository\");\n      return false;\n    }\n\n    return true;\n  }\n\n  async saveCollection(name, selectedRepos) {\n    const data = await window.electronAPI.getReposData();\n\n    if (data.collections && data.collections[name]) {\n      throw new Error(\"A collection with this name already exists\");\n    }\n\n    if (!data.collections) data.collections = {};\n    data.collections[name] = {\n      name,\n      repos: selectedRepos,\n      updatedAt: new Date().toISOString(),\n    };\n\n    await window.electronAPI.writeReposFile(data);\n  }\n}\n\n// =======================\n// UI Management\n// =======================\nconst UIManager = {\n  init(callbacks = {}) {\n    this.searchInput = document.getElementById(\"search-input\");\n    this.refreshBtn = document.getElementById(\"refresh-btn\");\n\n    // Store callbacks\n    this.handleEditRepository = callbacks.onEditRepository || (() => {});\n    this.handleEditCollection = callbacks.onEditCollection || (() => {});\n\n    // Initialize edit collection modal if it doesn't exist\n    if (!this.editCollectionModal) {\n      this.editCollectionModal = new EditCollectionModal();\n    }\n\n    this.bindEvents();\n    this.refresh();\n  },\n\n  bindEvents() {\n    // Debounce search to improve performance\n    const debouncedUpdate = Utils.debounce(() => this.updateDisplay(), 300);\n    this.searchInput.addEventListener(\"input\", debouncedUpdate);\n    this.refreshBtn.addEventListener(\"click\", () => this.refresh());\n  },\n\n  async refresh() {\n    this.showRefreshAnimation();\n\n    try {\n      const data = await window.electronAPI.getReposData();\n      this.processData(data);\n      this.updateDisplay();\n    } catch (error) {\n      NotificationManager.showError(`Error refreshing data: ${error.message}`);\n    } finally {\n      this.hideRefreshAnimation();\n    }\n  },\n\n  processData(data) {\n    // Process repositories\n    if (data.repos) {\n      const repos = Object.entries(data.repos).map(([name, repo]) => ({\n        name,\n        path: repo.path,\n        updatedAt: repo.updatedAt || new Date().toISOString(),\n      }));\n      AppState.setRepos(repos);\n    } else {\n      AppState.setRepos([]);\n    }\n\n    // Process collections\n    if (data.collections) {\n      const collections = Object.values(data.collections).map((collection) => ({\n        name: collection.name,\n        repos: Array.isArray(collection.repos)\n          ? collection.repos.join(\", \")\n          : \"\",\n        updatedAt: collection.updatedAt || new Date().toISOString(),\n      }));\n      AppState.setCollections(collections);\n    } else {\n      AppState.setCollections([]);\n    }\n  },\n\n  updateDisplay() {\n    const searchTerm = this.searchInput.value.trim();\n    this.updateRepositoriesTable(AppState.getFilteredRepos(searchTerm));\n    this.updateCollectionsTable(AppState.getFilteredCollections(searchTerm));\n  },\n\n  updateRepositoriesTable(repos) {\n    const container = document.getElementById(\"repos-list\");\n    const table = document.getElementById(\"repos-table\");\n    const loading = document.getElementById(\"loading-repos\");\n\n    if (repos.length === 0) {\n      loading.textContent = \"No matching repositories found.\";\n      loading.style.display = \"block\";\n      table.style.display = \"none\";\n      return;\n    }\n\n    loading.style.display = \"none\";\n    table.style.display = \"table\";\n\n    container.innerHTML = repos\n      .sort((a, b) => a.name.localeCompare(b.name))\n      .map((repo) => this.createRepositoryRow(repo))\n      .join(\"\");\n\n    this.bindRepositoryEvents();\n  },\n\n  createRepositoryRow(repo) {\n    return `\n      <tr data-path=\"${Utils.formatPath(repo.path)}\" data-name=\"${repo.name}\" class=\"clickable-repo-row\">\n        <td><strong>${repo.name}</strong></td>\n        <td class=\"path\">${Utils.formatPath(repo.path)}</td>\n        <td class=\"actions\">\n          <div style=\"display: flex; gap: 5px\">\n            <button class=\"edit-btn\" data-name=\"${repo.name}\" data-path=\"${Utils.formatPath(repo.path)}\" data-type=\"repo\" title=\"Edit repository\">✏️</button>\n            <button class=\"delete-btn\" data-name=\"${repo.name}\" data-type=\"repo\" title=\"Delete repository\">🗑️</button>\n          </div>\n        </td>\n      </tr>\n    `;\n  },\n\n  bindRepositoryEvents() {\n    // Bind click events for opening repositories\n    document.querySelectorAll(\".clickable-repo-row\").forEach((row) => {\n      row.addEventListener(\"click\", (e) => this.handleRepositoryClick(e, row));\n    });\n\n    // Bind edit events\n    document.querySelectorAll('.edit-btn[data-type=\"repo\"]').forEach((btn) => {\n      btn.addEventListener(\"click\", (e) => {\n        e.stopPropagation();\n        const name = btn.dataset.name;\n        const path = btn.dataset.path;\n        if (this.handleEditRepository) {\n          this.handleEditRepository({ name, path });\n        }\n      });\n    });\n\n    // Bind delete events\n    document\n      .querySelectorAll('.delete-btn[data-type=\"repo\"]')\n      .forEach((btn) => {\n        btn.addEventListener(\"click\", (e) =>\n          this.handleRepositoryDelete(e, btn)\n        );\n      });\n  },\n\n  async handleRepositoryClick(e, row) {\n    if (e.target.tagName === \"BUTTON\") return;\n\n    const selectedIDE = IDEManager.getSelectedIDE();\n    if (!selectedIDE) {\n      NotificationManager.showError(\"Please select an IDE first\");\n      return;\n    }\n\n    const repoPath = row.getAttribute(\"data-path\");\n    const repoName = row.getAttribute(\"data-name\");\n    console.log(repoPath, repoName);\n    if (!repoPath) return;\n\n    try {\n      const result = await window.electronAPI.openInIDE({\n        name: repoName,\n        path: repoPath,\n        ide: selectedIDE,\n      });\n\n      if (!result.success) {\n        throw new Error(result.error || \"Failed to open in IDE\");\n      }\n\n      NotificationManager.showSuccess(\n        `Successfully opened ${repoPath} in ${selectedIDE}`\n      );\n    } catch (error) {\n      NotificationManager.showError(`Error opening IDE: ${error.message}`);\n    }\n  },\n\n  async handleRepositoryDelete(e, btn) {\n    e.stopPropagation();\n\n    const name = btn.getAttribute(\"data-name\");\n    // if (!confirm(`Are you sure you want to delete repository \"${name}\"?`))\n    //   return;\n\n    const loadingEl = this.showLoadingIndicator(\"Deleting...\");\n\n    try {\n      const result = await window.electronAPI.deleteRepo(name);\n\n      if (result?.success) {\n        NotificationManager.showSuccess(`Successfully deleted ${name}`);\n        this.updateDisplay();\n      } else {\n        throw new Error(result?.error || \"Unknown error\");\n      }\n    } catch (error) {\n      NotificationManager.showError(`Error deleting ${name}: ${error.message}`);\n    } finally {\n      this.hideLoadingIndicator(loadingEl);\n    }\n  },\n\n  updateCollectionsTable(collections) {\n    const container = document.getElementById(\"collections-list\");\n    const table = document.getElementById(\"collections-table\");\n    const loading = document.getElementById(\"loading-collections\");\n\n    if (collections.length === 0) {\n      loading.textContent = \"No matching collections found.\";\n      loading.style.display = \"block\";\n      table.style.display = \"none\";\n      return;\n    }\n\n    loading.style.display = \"none\";\n    table.style.display = \"table\";\n\n    container.innerHTML = collections\n      .sort((a, b) => a.name.localeCompare(b.name))\n      .map((collection) => this.createCollectionRow(collection))\n      .join(\"\");\n\n    this.bindCollectionEvents();\n  },\n\n  createCollectionRow(collection) {\n    const collectionData = JSON.stringify(collection).replace(/\"/g, \"&quot;\");\n    return `\n      <tr class=\"clickable-collection-row\" data-collection=\"${collectionData}\">\n        <td><strong>${collection.name}</strong></td>\n        <td>${collection.repos}</td>\n        <td class=\"actions\">\n          <div style=\"display: flex; gap: 5px\">\n            <button class=\"edit-btn\" data-name=\"${collection.name}\" data-type=\"collection\" title=\"Edit collection\">✏️</button>\n            <button class=\"delete-btn\" data-name=\"${collection.name}\" data-type=\"collection\" title=\"Delete collection\">🗑️</button>\n          </div>\n        </td>\n      </tr>\n    `;\n  },\n\n  bindCollectionEvents() {\n    // Bind click events for opening collections\n    document.querySelectorAll(\".clickable-collection-row\").forEach((row) => {\n      row.addEventListener(\"click\", (e) => this.handleCollectionClick(e, row));\n    });\n\n    // Bind edit events\n    document\n      .querySelectorAll('.edit-btn[data-type=\"collection\"]')\n      .forEach((btn) => {\n        btn.addEventListener(\"click\", (e) => {\n          e.stopPropagation();\n          const collectionData = JSON.parse(\n            btn\n              .closest(\"tr\")\n              .getAttribute(\"data-collection\")\n              .replace(/&quot;/g, '\"')\n          );\n          if (this.editCollectionModal) {\n            this.editCollectionModal.open(collectionData);\n          }\n        });\n      });\n\n    // Bind delete events\n    document\n      .querySelectorAll('.delete-btn[data-type=\"collection\"]')\n      .forEach((btn) => {\n        btn.addEventListener(\"click\", (e) =>\n          this.handleCollectionDelete(e, btn)\n        );\n      });\n  },\n\n  async handleCollectionClick(e, row) {\n    if (e.target.tagName === \"BUTTON\") return;\n\n    try {\n      const collection = JSON.parse(row.getAttribute(\"data-collection\"));\n      const reposData = await window.electronAPI.getReposData();\n\n      const repos = collection.repos.split(\",\").map((repo) => {\n        const [name, path, ide] = repo\n          .trim()\n          .split(\"|\")\n          .map((s) => s.trim());\n        return { name, path, ide };\n      });\n\n      // Open all repositories in parallel\n      const promises = repos.map(async (repo) => {\n        const repoData = reposData.repos[repo.name];\n\n        if (!repoData) {\n          NotificationManager.showError(\n            `${repo.name}: Not found in repositories`\n          );\n          return;\n        }\n\n        const ide = repo.ide || IDEManager.getSelectedIDE();\n\n        try {\n          await window.electronAPI.openInIDE({\n            name: repo.name,\n            path: repoData.path,\n            ide: ide,\n          });\n        } catch (error) {\n          NotificationManager.showError(\n            `Failed to open ${repo.name}: ${error.message}`\n          );\n        }\n      });\n\n      await Promise.allSettled(promises);\n      NotificationManager.showSuccess(`Successfully opened ${collection.name}`);\n    } catch (error) {\n      NotificationManager.showError(\n        `Error processing collection: ${error.message}`\n      );\n    }\n  },\n\n  async handleCollectionDelete(e, btn) {\n    e.stopPropagation();\n\n    const name = btn.getAttribute(\"data-name\");\n    // if (!confirm(`Are you sure you want to delete collection \"${name}\"?`))\n    //   return;\n\n    const loadingEl = this.showLoadingIndicator(\"Deleting...\");\n\n    try {\n      const result = await window.electronAPI.deleteCollection(name);\n\n      if (result?.success) {\n        NotificationManager.showSuccess(`Successfully deleted ${name}`);\n        this.updateDisplay();\n      } else {\n        throw new Error(result?.error || \"Unknown error\");\n      }\n    } catch (error) {\n      NotificationManager.showError(`Error deleting ${name}: ${error.message}`);\n    } finally {\n      this.hideLoadingIndicator(loadingEl);\n    }\n  },\n\n  showRefreshAnimation() {\n    this.refreshBtn.classList.add(\"rotating\");\n  },\n\n  hideRefreshAnimation() {\n    setTimeout(() => {\n      this.refreshBtn.classList.remove(\"rotating\");\n    }, 1000);\n  },\n\n  showLoadingIndicator(text) {\n    const indicator = Utils.createElement(\n      \"div\",\n      {\n        style: `\n        position: fixed;\n        top: 10px;\n        right: 10px;\n        padding: 10px;\n        background: rgba(0,0,0,0.7);\n        color: white;\n        border-radius: 4px;\n        z-index: 1000;\n      `,\n      },\n      [text]\n    );\n\n    document.body.appendChild(indicator);\n    return indicator;\n  },\n\n  hideLoadingIndicator(indicator) {\n    if (document.body.contains(indicator)) {\n      document.body.removeChild(indicator);\n    }\n  },\n};\n\n// =======================\n// Application Initialization\n// =======================\nclass App {\n  constructor() {\n    this.init();\n  }\n\n  init() {\n    // Initialize core systems\n    ThemeManager.init();\n    IDEManager.init();\n\n    // Initialize modals\n    this.repositoryModal = new RepositoryModal();\n    this.editRepositoryModal = new EditRepositoryModal();\n    this.collectionModal = new CollectionModal();\n    this.editCollectionModal = new EditCollectionModal();\n\n    // Initialize UI manager with modals\n    UIManager.init({\n      onEditRepository: (repo) => this.editRepositoryModal.open(repo),\n      onEditCollection: (collection) =>\n        this.editCollectionModal.open(collection),\n    });\n\n    // Handle electron API data\n    this.bindElectronEvents();\n\n    console.log(\"👋 OpenMate application initialized successfully\");\n  }\n\n  bindElectronEvents() {\n    if (window.electronAPI && window.electronAPI.onReposData) {\n      window.electronAPI.onReposData((data) => {\n        const { repos = [], collections = [] } = data;\n        AppState.setRepos(repos);\n        AppState.setCollections(collections);\n        UIManager.updateDisplay();\n      });\n    }\n  }\n}\n\n// =======================\n// Initialize Application\n// =======================\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  new App();\n});\n\n// Import styles\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/renderer.js\n\n}");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("d1b53704adfe7f4e0c60")
/******/ })();
/******/ 
/******/ }
);